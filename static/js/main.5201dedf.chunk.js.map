{"version":3,"sources":["components/Box.tsx","components/MainContainer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["boxTypes","Directions","Box","props","type","Head","className","S","box","out","css","Snake","Food","STARTING_SQARES","STARTING_DIRECTION","Right","MainContainer","observer","_foodBox","Math","floor","random","timer","startMoving","setInterval","nextSquare","snakeBoxes","includes","clearInterval","foodBox","shift","push","resetBoard","direction","keyDownListener","e","keyCode","window","addEventListener","this","removeEventListener","onClick","score","mainContainer","boxes","index","key","undefined","length","lastSquare","Down","Left","Up","React","Component","computed","observable","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5201dedf.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { css } from \"emotion\";\r\n\r\ninterface BoxProps{\r\n    type?:boxTypes;\r\n    out?:boolean;\r\n}\r\n\r\nexport enum boxTypes{\r\n    Snake = 'snake',\r\n    Food = 'food',\r\n    Head = 'head'\r\n}\r\n\r\nexport const Box = (props:BoxProps) => {\r\n   return props.type === boxTypes.Head ? \r\n   <div className={S.box(props.type,props.out)}>\r\n       <div></div>\r\n       <div></div>\r\n   </div>:\r\n   <div className={S.box(props.type,props.out)}></div>\r\n\r\n}\r\n   \r\n\r\nconst S = {\r\n    box:(type?:boxTypes, out:boolean = false)=>css`\r\n        background:hsl(${type === boxTypes.Snake ? 200 : type === boxTypes.Food ? 0 :  120}, 100%, 25%); \r\n        border:0.5px solid hsl(120, 100%,${out ? 0 : 75}%);\r\n        transition:border ease 500ms;\r\n        flex-grow: 1 1;\r\n        flex-shrink: 0;\r\n        /** Full width divided by 8 minus 2px of border */\r\n        flex-basis: calc((100% / 8) - 2px);  \r\n        `\r\n}","import React from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { observable, computed } from 'mobx';\r\nimport { css } from 'emotion';\r\nimport { Box, boxTypes } from './Box';\r\n\r\nenum Directions{\r\n    Right = 39,\r\n    Left = 37,\r\n    Up = 38,\r\n    Down =40\r\n}\r\n\r\nconst STARTING_SQARES:number[] = [27,28];\r\nconst STARTING_DIRECTION:Directions = Directions.Right;\r\n\r\n@observer\r\nexport class MainContainer extends React.Component<{}>{\r\n\r\n    @computed get boxes():JSX.Element[]{\r\n        const boxes:JSX.Element[] = [];\r\n        for (let index = 0; index < 64; index++) {\r\n            boxes.push(\r\n                <Box key={index} out={this.out} type={\r\n                    this.snakeBoxes.includes(index) ? \r\n                        (index === 0 ? boxTypes.Head  :boxTypes.Snake) : \r\n                        this.foodBox === index ? boxTypes.Food : undefined\r\n                } />\r\n            )   \r\n        }\r\n        return boxes;\r\n    }\r\n\r\n    @computed get score():number{\r\n        return this.snakeBoxes.length - 2;\r\n    } \r\n\r\n    @computed get nextSquare():number{\r\n        const lastSquare: number = this.snakeBoxes[this.snakeBoxes.length -1];\r\n        switch(this.direction){\r\n            case Directions.Right:\r\n                return (lastSquare  + 1) % 8 === 0 ? -1 : lastSquare + 1;\r\n            case Directions.Down:\r\n                return  lastSquare >  55 ? -1 : lastSquare + 8;\r\n            case Directions.Left:\r\n                return (lastSquare) % 8 === 0 ? -1 : lastSquare - 1;\r\n            case Directions.Up:\r\n                return lastSquare < 8 ? -1 :  lastSquare - 8;\r\n        }\r\n    }\r\n\r\n    private _foodBox = Math.floor(Math.random() * Math.floor(63));\r\n    @computed get foodBox():number{\r\n        while(this.snakeBoxes.includes(this._foodBox)){\r\n            this._foodBox = Math.floor(Math.random() * Math.floor(63));\r\n        }\r\n        return this._foodBox;\r\n    } \r\n    \r\n    @observable snakeBoxes:number[] = STARTING_SQARES;\r\n    @observable direction:Directions = STARTING_DIRECTION;\r\n    @observable out:boolean = false;\r\n    timer:NodeJS.Timer;\r\n\r\n    startMoving = () => {\r\n        this.timer = setInterval(() => {\r\n            if(this.nextSquare === -1 || this.snakeBoxes.includes(this.nextSquare)){\r\n                clearInterval(this.timer);\r\n                this.out = true;\r\n            }else{\r\n                if(this.nextSquare !== this.foodBox) {\r\n                    this.snakeBoxes.shift();\r\n                }\r\n                this.snakeBoxes.push(this.nextSquare);\r\n            } \r\n        }, 400);\r\n    }\r\n\r\n    resetBoard = () =>  {\r\n        this.snakeBoxes = STARTING_SQARES;\r\n        this.direction = STARTING_DIRECTION;\r\n        this.out = false;\r\n    }\r\n\r\n    keyDownListener = (e:KeyboardEvent) => {\r\n        if(e.keyCode in Directions) {\r\n            this.direction = e.keyCode;\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        window.addEventListener('keydown', this.keyDownListener , true);\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        window.removeEventListener('keydown', this.keyDownListener , true);\r\n    }\r\n    render(){\r\n        return (\r\n            <div>\r\n                <button onClick={this.startMoving}>Start</button>\r\n                <button onClick={this.resetBoard}>Reset</button>\r\n                <div>Score : {this.score}</div>\r\n                <div className={S.mainContainer(this.out)}>\r\n                    {this.boxes}\r\n                </div>\r\n            </div>\r\n        \r\n        );\r\n    }\r\n} \r\n\r\nconst S = {\r\n    mainContainer:(out:boolean)=>css`\r\n        width:80vh;\r\n        height:80vh;\r\n        display: flex;\r\n        align-items: stretch;\r\n        flex-wrap:wrap;\r\n        border:${out? `5px solid hsl(0,100%,25%)` : `0.5px solid hsl(120, 100%, 75%)`};\r\n        transition:border ease 500ms;\r\n    `,\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport { MainContainer } from './components/MainContainer';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <MainContainer />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}